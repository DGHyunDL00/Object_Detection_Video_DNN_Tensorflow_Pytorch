import cv2
import sys
from imutils.video import FPS
from detection_boxes import DetectBoxes


def get_outputs_names(net):
    # names of network layers e.g. conv_0, bn_0, relu_0....
    layer_names = net.getLayerNames()
    return [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]


fileName = "assets/cars.mp4"

# textGraph and weight file of model
PATH_TO_CONFIG = "data/yolov3.cfg"
PATH_TO_MODEL_WEIGHT = "data/yolov3.weights"

# Load network
net = cv2.dnn.readNetFromDarknet(PATH_TO_CONFIG, PATH_TO_MODEL_WEIGHT)
net.setPreferableBackend(cv2.dnn.DNN_BACKEND_OPENCV)
net.setPreferableTarget(cv2.dnn.DNN_TARGET_CPU)

# class names ex) person, car, truck, and etc.
PATH_TO_LABELS = "labels/coco.names"

# load detection class, default confidence threshold is 0.5
detect = DetectBoxes(PATH_TO_LABELS, confidence_threshold=0.5, nms_threshold=0.4)

# Set window
winName = 'YOLO'

try:
    # Read Video file
    cap = cv2.VideoCapture(fileName)
except IOError:
    print("Input video file", fileName, "doesn't exist")
    sys.exit(1)

frameCount = 0
fps = FPS().start()
while cap.isOpened():
    hasFrame, frame = cap.read()
    # if end of frame, program is terminated
    if not hasFrame:
        break

    # Create a 4D blob from a frame.
    blob = cv2.dnn.blobFromImage(frame, 1/255, (416, 416), (0, 0, 0), True, crop=False)

    # Set the input to the network
    net.setInput(blob)

    # Runs the forward pass
    network_output = net.forward(get_outputs_names(net))

    # Extract the bounding box and draw rectangles
    detect.detect_bounding_boxes(frame, network_output)

    # Efficiency information
    t, _ = net.getPerfProfile()
    label = 'Time per frame : %0.0f ms' % abs(
        t * 1000.0 / cv2.getTickFrequency())
    cv2.putText(frame, label, (0, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (255, 0, 0))

    cv2.imshow(winName, frame)
    fps.update()
    frameCount += 1
    key = cv2.waitKey(1)
    if key & 0xFF == ord('q'):
        break


fps.stop()
print("Video ended")
print("approximate FPS {}".format(fps.fps()))

# releases video and removes all windows generated by the program
cap.release()
cv2.destroyAllWindows()
