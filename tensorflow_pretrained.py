import numpy as np
import os
import sys
import tensorflow as tf
import cv2
from imutils.video import FPS


fileName = "assets/cars.mp4"


sys.path.append("..")
# from object_detetion.utils import ops as utils_ops
# from object_detetion.utils import label_map_util
# from object_detetion.utils import visualization_utils as vis_util

# frozengraph
PATH_TO_MODEL_WEIGHT = "faster_rcnn_resnet101_coco_2018_01_28/frozen_inference_graph.pb"

# Load Tensorflow model into memory
detection_graph = tf.Graph()
with detection_graph.as_default():
    od_graph_def = tf.compat.v1.GraphDef()
    with tf.io.gfile.Gfile(PATH_TO_MODEL_WEIGHT, 'rb') as fid:
        serialized_graph = fid.read()
        od_graph_def.ParseFromString(serialized_graph)
        tf.import_graph_def(od_graph_def, name='')

# category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS, use_display_name=True)


def run_inference_for_single_image(image, sess):
    if 'detection_masks' in tensor_dict:
        # The following processing is only for single image
        detection_boxes = tf.squeeze(tensor_dict['detection_boxes'], [0])
        detection_masks = tf.squeeze(tensor_dict['detection_masks'], [0])

        # Reframe is required to translate mask from box coordinates to image coordinated and fit the image size.
        real_num_detection = tf.cast(tensor_dict['num_detections'][0], tf.int32)
        detection_boxes = tf.slice(detection_boxes, [0, 0], [real_num_detection, -1])
        detection_masks = tf.slice(detection_masks, [0, 0, 0], [real_num_detection, -1, -1])
        detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(detection_masks,
                                                                               detection_boxes, image.shape[0], image.shape[1])
        detection_masks_reframed = tf.cast(tf.greater(detection_masks_reframed, 0.5), tf.uint8)

        # Follow convention by adding back the batch dimension
        tensor_dict['detection_masks'] = tf.expand_dims(detection_masks_reframed, 0)

    image_tensor = tf.get_default_graph().get_tensor_by_name('image_tensor:0')

    out_dict = sess.run(tensor_dict, feed_dict={image_tensor : np.expand_dims(image, 0)})

    # all outputs are float32 numpy arrays, so coovert types as appropriate
    out_dict['num_detections'] = int(out_dict['num_detections'][0])
    out_dict['detection_classes'] = out_dict['detection_classes'][0].astype(np.uint8)
    out_dict['detection_boxes'] = out_dict['detection_boxes'][0]
    out_dict['detection_scores'] = out_dict['detection_scores'][0]

    if 'detection_masks' in out_dict:
        out_dict['detection_masks'] = out_dict['detection_masks'][0]


    return out_dict


# Set window
winName = 'YOLO'

try:
    # Read Video file
    cap = cv2.VideoCapture(fileName)
except IOError:
    print("Input video file", fileName, "doesn't exist")
    sys.exit(1)

frameCount = 0
gpu = tf.test.is_gpu_available()
config = None
try:
    with detection_graph.as_default():
        if gpu:
            config = tf.ConfigProto()
        else:
            config = tf.ConfigProto(device_count={"GPU" : 0})

        with tf.Session(config=config) as sess:
            ops = tf.get_default_graph().get_operations()
            all_tensor_names = {output.name for op in ops for output in op.outputs}
            tensor_dict = {}
            for key in [
                'num_detections', 'detection_boxes', 'detection_scores',
                'detection_classes', 'detection_masks'
            ]:
                tensor_name = key + ':0'
                if tensor_name in all_tensor_names:
                    tensor_dict[key] = tf.get_default_graph().get_tensor_by_name(tensor_name)

        frameCount = 0
        fps = FPS().start()
        while True:
            hasFrame, frame = cap.read()
            # if end of frame, program is terminated
            if not hasFrame:
                break

            # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
            image_np_expanded = np.expand_dims(frame, axis=0)

            # Actual detection

            output_dict = run_inference_for_single_image(frame, sess)

            # Visualization of the results of a detection


            cv2.imshow(winName, frame)
            fps.update()
            frameCount += 1
            if cv2.waitKey(cv2.CAP_PROP_FPS) and 0xFF == ord('q'):
                break


        fps.stop()
        print("Video ended")
        print("approximate FPS {}".format(fps.fps()))

        # releases video and removes all windows generated by the program
        cap.release()
        cv2.destroyAllWindows()
except Exception as e:
    print(e)
    cap.release()


