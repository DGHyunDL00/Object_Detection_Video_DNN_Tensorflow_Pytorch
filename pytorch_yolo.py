from __future__ import division
import time
import cv2
import sys
import torch
from darknet import Darknet
from detection_boxes_pytorch import DetectBoxes
from imutils.video import FPS


fileName = "assets/cars.mp4"

print("Loading network.....")
model = Darknet("data/yolov3.cfg")
model.load_weights("data/yolov3.weights")
print("Network successfully loaded")

model.net_info["height"] = 416
inp_dim = int(model.net_info["height"])
assert inp_dim % 32 == 0
assert inp_dim > 32


device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)
model.eval()

PATH_TO_LABELS = 'labels/coco.names'

# load detection class, default confidence threshold is 0.5
detect = DetectBoxes(PATH_TO_LABELS, conf_threshold=0.5, nms_threshold=0.4)


# Set window
winName = 'YOLO'

try:
    # Read Video file
    cap = cv2.VideoCapture(fileName)
except IOError:
    print("Input video file", fileName, "doesn't exist")
    sys.exit(1)

frameCount = 0
start = time.time()
fps = FPS().start()
while cap.isOpened():
    hasFrame, frame = cap.read()

    if not hasFrame:
        break

    detect.bounding_box_yolo(frame, inp_dim, model)

    cv2.imshow(winName, frame)
    frameCount += 1
    fps.update()
    key = cv2.waitKey(1)
    if key & 0xFF == ord('q'):
        break

fps.stop()
print("Video ended")
print("approximate FPS {}".format(fps.fps()))

# releases video and removes all windows generated by the program
cap.release()
cv2.destroyAllWindows()
